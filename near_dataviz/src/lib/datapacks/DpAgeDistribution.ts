/**
 * DATAPACK - Distribution des √¢ges
 * 
 * Ce datapack charge les donn√©es r√©elles de distribution d'√¢ge depuis :
 * - Su Answer.json : R√©ponses individuelles pour les SUs sp√©cifiques
 * - Quartiers.json : Donn√©es agr√©g√©es INSEE pour la vue quartier
 * - MetaSuQuestions.json et MetaSuChoices.json : M√©tadonn√©es
 */

import { getCacheStatus } from '~/lib/data-loader'

import { mapLocalToGlobalIds } from '~/lib/services/suIdMapping'

// =====================================
// INTERFACES ET TYPES
// =====================================

// Interface pour les r√©ponses individuelles (Su Answer.json)
interface SuAnswer {
  ID: number
  "Su ID": number
  "Age Category": string
  Gender?: string
  [key: string]: unknown
}

// Interface pour les donn√©es de quartier (Quartiers.json)
interface QuartierData {
  "Survey ID": number
  "Population Sum": number
  "P21 Pop1529 Sum": number    // 15-29 ans
  "P21 Pop3044 Sum": number    // 30-44 ans
  "P21 Pop4559 Sum": number    // 45-59 ans
  "P21 Pop6074 Sum": number    // 60-74 ans
  "P21 Pop75p Sum": number     // 75+ ans
  [key: string]: unknown
}

// Interface pour les m√©tadonn√©es des questions
interface MetaQuestion {
  Id: number
  "Question Origin": string
  "Question Short": string
  "Emoji": string
  "Metabase Question Key": string
}

// Interface pour les m√©tadonn√©es des choix
interface MetaChoice {
  Id: number
  "Label Origin": string
  "Label Long": string
  "Label Short": string
  "Emoji": string
  "Metabase Question Key": string
  "Metabase Choice Key": string
}

// Export interface (backward compatibility)
export interface AgeDistributionResult {
  data: {
    value: string         // Cl√© du choix (ex: "FROM_15_TO_29")
    label: string         // Label affich√© (ex: "15-29 ans")
    emoji: string         // Emoji associ√©
    count: number         // Nombre absolu de r√©ponses
    percentage: number    // Pourcentage
    midpoint: number      // Point m√©dian de la tranche (pour calculs)
  }[]
  isQuartier: boolean     // True si vue quartier, false si SU sp√©cifique
  questionLabels: {
    title: string
    emoji: string
    questionOrigin: string
    questionShort: string
  }
  suId?: number          // ID de la SU si vue sp√©cifique
  totalResponses: number // Nombre total de r√©ponses
  dataSource: string     // Source des donn√©es
}

// ===========================
// CONSTANTES ET CONFIGURATION
// ===========================

const DATAPACK_NAME = 'DpAgeDistribution'

// Cache c√¥t√© client pour √©viter les recalculs
const dataCache = new Map<string, AgeDistributionResult>()
let cacheTimestamp = 0
const CACHE_DURATION = 3600000 // 1 heure en millisecondes

// Mappage des tranches d'√¢ge INSEE vers nos codes
const INSEE_AGE_MAPPING = {
  'P21 Pop1529 Sum': 'FROM_15_TO_29',
  'P21 Pop3044 Sum': 'FROM_30_TO_44', 
  'P21 Pop4559 Sum': 'FROM_45_TO_59',
  'P21 Pop6074 Sum': 'FROM_60_TO_74',
  'P21 Pop75p Sum': 'ABOVE_75'
}

// Points m√©dians pour les calculs (ex: moyenne d'√¢ge)
const AGE_MIDPOINTS: Record<string, number> = {
  FROM_15_TO_29: 22,
  FROM_30_TO_44: 37,
  FROM_45_TO_59: 52,
  FROM_60_TO_74: 67,
  ABOVE_75: 82
}

// Les couleurs sont g√©r√©es par DpColor dans les composants Dv

// =====================================
// FONCTIONS DE CHARGEMENT DES DONN√âES
// =====================================

/**
 * Charge les r√©ponses individuelles depuis Su Answer.json
*/
const loadSuAnswerData = async (): Promise<SuAnswer[]> => {
  try {
    const response = await fetch('/api/data/Su%20Answer')
    if (!response.ok) throw new Error(`HTTP ${response.status}`)
    const data = await response.json() as SuAnswer[]
    console.log(`üìä Charg√© ${data.length} r√©ponses individuelles`)
    return data
  } catch (error) {
    console.error('Erreur lors du chargement de Su Answer:', error)
    return []
  }
}

/**
 * Charge les donn√©es de quartier depuis Quartiers.json
 */
const loadQuartierData = async (): Promise<QuartierData[]> => {
  try {
    const response = await fetch('/api/data/Quartiers')
    if (!response.ok) throw new Error(`HTTP ${response.status}`)
    const data = await response.json() as QuartierData[]
    console.log(`üèòÔ∏è Charg√© ${data.length} quartiers`)
    return data
  } catch (error) {
    console.error('Erreur lors du chargement des quartiers:', error)
    return []
  }
}

/**
 * Charge les m√©tadonn√©es des questions depuis MetaSuQuestions.json
 */
const loadMetaQuestions = async (): Promise<MetaQuestion[]> => {
  try {
    const response = await fetch('/api/data/MetaSuQuestions')
    if (!response.ok) throw new Error(`HTTP ${response.status}`)
    const data = await response.json() as MetaQuestion[]
    console.log(`üîç Charg√© ${data.length} m√©tadonn√©es de questions`)
    return data
  } catch (error) {
    console.error('Erreur lors du chargement des m√©tadonn√©es de questions:', error)
    return []
  }
}

/**
 * Charge les m√©tadonn√©es des choix depuis MetaSuChoices.json
 */
const loadMetaChoices = async (): Promise<MetaChoice[]> => {
  try {
    const response = await fetch('/api/data/MetaSuChoices')
    if (!response.ok) throw new Error(`HTTP ${response.status}`)
    const data = await response.json() as MetaChoice[]
    console.log(`üéØ Charg√© ${data.length} m√©tadonn√©es de choix`)
    return data
  } catch (error) {
    console.error('Erreur lors du chargement des m√©tadonn√©es de choix:', error)
    return []
  }
}



// =====================================
// FONCTIONS DE TRAITEMENT DES M√âTADONN√âES
// =====================================

/**
 * Extrait les m√©tadonn√©es de la question "Age Category"
 */
const getAgeQuestionMetadata = (metaQuestions: MetaQuestion[]) => {
  const ageQuestion = metaQuestions.find(q => q["Metabase Question Key"] === "Age Category")
  
  if (!ageQuestion) {
    console.warn('‚ö†Ô∏è M√©tadonn√©es de question √¢ge non trouv√©es, utilisation des valeurs par d√©faut')
    return {
      title: 'Distribution d\'√¢ge',
      emoji: 'üë•',
      questionOrigin: 'Quelle est votre tranche d\'√¢ge ?',
      questionShort: 'Tranches d\'√¢ges'
    }
  }

  return {
    title: ageQuestion["Question Short"] || 'Distribution d\'√¢ge',
    emoji: ageQuestion.Emoji || 'üë•',
    questionOrigin: ageQuestion["Question Origin"] || 'Quelle est votre tranche d\'√¢ge ?',
    questionShort: ageQuestion["Question Short"] || 'Tranches d\'√¢ges'
  }
}

/**
 * Cr√©e un dictionnaire des choix d'√¢ge avec leurs m√©tadonn√©es
 */
const getAgeChoicesMetadata = (metaChoices: MetaChoice[]) => {
  const ageChoices = metaChoices.filter(c => c["Metabase Question Key"] === "Age Category")
  
  if (ageChoices.length === 0) {
    console.warn('‚ö†Ô∏è M√©tadonn√©es de choix √¢ge non trouv√©es, utilisation des valeurs par d√©faut')
    return {
      FROM_15_TO_29: { label: '15-29 ans', emoji: '' },
      FROM_30_TO_44: { label: '30-44 ans', emoji: '' },
      FROM_45_TO_59: { label: '45-59 ans', emoji: '' },
      FROM_60_TO_74: { label: '60-74 ans', emoji: '' },
      ABOVE_75: { label: '75+ ans', emoji: '' }
    }
  }

  const choicesMap: Record<string, { label: string; emoji: string }> = {}
  
  ageChoices.forEach(choice => {
    const key = choice["Metabase Choice Key"]
    choicesMap[key] = {
      label: choice["Label Origin"] || choice["Label Short"] || key,
      emoji: choice.Emoji || 'üë•'
    }
  })

  return choicesMap
}

// =====================================
// FONCTIONS DE TRAITEMENT DES DONN√âES
// =====================================

/**
 * Traite les r√©ponses individuelles pour calculer la distribution d'√¢ge
 */
const processAgeDistribution = (
  answers: SuAnswer[],
  choicesMetadata: Record<string, { label: string; emoji: string }>
): AgeDistributionResult['data'] => {
  
  // Compter les r√©ponses par cat√©gorie d'√¢ge
  const ageCounts: Record<string, number> = {}
  const totalAnswers = answers.length

  // Initialiser les compteurs
  Object.keys(choicesMetadata).forEach(key => {
    ageCounts[key] = 0
  })

  // Compter les r√©ponses valides
  answers.forEach(answer => {
    const ageCategory = answer["Age Category"]
    if (ageCategory && ageCounts.hasOwnProperty(ageCategory)) {
      ageCounts[ageCategory] = (ageCounts[ageCategory] ?? 0) + 1
    }
  })

  // Calculer les pourcentages et cr√©er les donn√©es finales
  return Object.entries(ageCounts).map(([key, count]) => {
    const percentage = totalAnswers > 0 ? (count / totalAnswers) * 100 : 0
    const metadata = choicesMetadata[key] ?? { label: key, emoji: 'üë•' }
    
    return {
      value: key,
      label: metadata.label,
      emoji: metadata.emoji,
      count,
      percentage: Math.round(percentage * 10) / 10, // Arrondir √† 1 d√©cimale
      midpoint: AGE_MIDPOINTS[key] ?? 0
    }
  }).filter(item => item.count > 0) // Exclure les cat√©gories vides
}

/**
 * Traite les donn√©es de quartier INSEE pour la distribution d'√¢ge
 */
const processQuartierAgeDistribution = (
  quartiers: QuartierData[],
  selectedQuartierNames: string[]
): AgeDistributionResult['data'] => {
  
  // Filtrer les quartiers s√©lectionn√©s (ou tous si aucun sp√©cifi√©)
  const targetQuartiers = selectedQuartierNames.length > 0 
    ? quartiers.filter(q => selectedQuartierNames.includes(String(q.Nom)))
    : quartiers

  console.log(`üìä Traitement de ${targetQuartiers.length} quartiers pour la distribution d'√¢ge`)

  // Agr√©ger les donn√©es INSEE par tranche d'√¢ge
  const aggregatedData: Record<string, number> = {}
  
  // Initialiser les compteurs
  Object.values(INSEE_AGE_MAPPING).forEach(ageKey => {
    aggregatedData[ageKey] = 0
  })

  // Sommer les populations par tranche d'√¢ge
  targetQuartiers.forEach(quartier => {
    Object.entries(INSEE_AGE_MAPPING).forEach(([inseeKey, ageKey]) => {
      const population = quartier[inseeKey as keyof QuartierData] as number || 0
      aggregatedData[ageKey] = (aggregatedData[ageKey] ?? 0) + population
    })
  })

  // Calculer le total pour les pourcentages
  const totalPopulation = Object.values(aggregatedData).reduce((sum, count) => sum + count, 0)

  // M√©tadonn√©es par d√©faut pour les quartiers
  const defaultChoicesMetadata = {
    FROM_15_TO_29: { label: '15-29 ans', emoji: 'üßí' },
    FROM_30_TO_44: { label: '30-44 ans', emoji: 'üë®' },
    FROM_45_TO_59: { label: '45-59 ans', emoji: 'üë®‚Äçüíº' },
    FROM_60_TO_74: { label: '60-74 ans', emoji: 'üë¥' },
    ABOVE_75: { label: '75+ ans', emoji: 'üëµ' }
  }

  // Cr√©er les donn√©es finales
  return Object.entries(aggregatedData).map(([key, count]) => {
    const percentage = totalPopulation > 0 ? (count / totalPopulation) * 100 : 0
    const metadata = defaultChoicesMetadata[key as keyof typeof defaultChoicesMetadata] || { label: key, emoji: 'üë•' }
    
    return {
      value: key,
      label: metadata.label,
      emoji: metadata.emoji,
      count,
      percentage: Math.round(percentage * 10) / 10, // Arrondir √† 1 d√©cimale
      midpoint: AGE_MIDPOINTS[key] ?? 0
    }
  }).filter(item => item.count > 0) // Exclure les tranches vides
}

// =====================================
// FONCTION PRINCIPALE
// =====================================

// Fonction principale avec cache
export const getDpAgeDistributionData = async (selectedSus?: number[]): Promise<AgeDistributionResult> => {
  try {
    const cacheKey = JSON.stringify(selectedSus ?? [])
    
    // V√©rifier le cache (1 heure d'expiration)
    if (dataCache.has(cacheKey) && (Date.now() - cacheTimestamp) < CACHE_DURATION) {
      console.log(`‚úÖ Utilisation des donn√©es mises en cache pour ${DATAPACK_NAME}`)
      return dataCache.get(cacheKey)!
    }

    console.log(`üîÑ Calcul des donn√©es pour ${DATAPACK_NAME}...`)
    
    // D√©terminer si c'est une vue quartier ou SU
    const isQuartier = !selectedSus || selectedSus.length === 0 || selectedSus.length > 1
    
    if (!isQuartier && selectedSus && selectedSus.length === 1) {
      // Mapper les ID locaux vers les ID globaux si n√©cessaire
      const mappedSuIds = await mapLocalToGlobalIds(selectedSus)
      const targetSuId = mappedSuIds[0]!
      
      // Traitement des donn√©es SU (r√©ponses individuelles)
      console.log(`üìã Traitement des r√©ponses SU: ${selectedSus[0]} ‚Üí ${targetSuId}`)
      
      const [suAnswers, metaQuestions, metaChoices] = await Promise.all([
        loadSuAnswerData(),
        loadMetaQuestions(),
        loadMetaChoices()
      ])

      console.log(`üìä Total des r√©ponses charg√©es: ${suAnswers.length}`)
      
      // Analyser les ID disponibles pour le debug
      const availableSuIds = [...new Set(suAnswers.map(answer => answer["Su ID"]))].sort((a, b) => a - b)
      console.log(`üîç ID des SU disponibles dans les donn√©es:`, availableSuIds)
      console.log(`üîç ID recherch√©:`, targetSuId)

      // Filtrer les r√©ponses pour le SU s√©lectionn√© (utiliser l'ID mapp√©)
      const filteredAnswers = suAnswers.filter(answer => 
        answer["Su ID"] === targetSuId
      )

      console.log(`üéØ ${filteredAnswers.length} r√©ponses trouv√©es pour le SU ${targetSuId}`)
      
      // Si aucune r√©ponse trouv√©e, sugg√©rer des ID valides
      if (filteredAnswers.length === 0 && availableSuIds.length > 0) {
        console.warn(`‚ö†Ô∏è Aucune r√©ponse pour SU ${targetSuId}. Essayez avec: ${availableSuIds.slice(0, 3).join(', ')}`)
      }

      // R√©cup√©rer les m√©tadonn√©es
      const questionMetadata = getAgeQuestionMetadata(metaQuestions)
      const choicesMetadata = getAgeChoicesMetadata(metaChoices)

      // Traiter la distribution d'√¢ge
      const ageData = processAgeDistribution(filteredAnswers, choicesMetadata)

      const result: AgeDistributionResult = {
        data: ageData,
        isQuartier: false,
        questionLabels: questionMetadata,
        suId: targetSuId, // Utiliser l'ID mapp√©
        totalResponses: filteredAnswers.length,
        dataSource: 'Su Answer'
      }
      
      // Mettre en cache le r√©sultat
      dataCache.set(cacheKey, result)
      cacheTimestamp = Date.now()
      
      console.log(`‚úÖ Donn√©es de distribution d'√¢ge calcul√©es et mises en cache`)
      return result
      
    } else {
      // Traitement des donn√©es de quartier INSEE
      console.log(`üèòÔ∏è Traitement des donn√©es de quartier`)
      
      const quartiers = await loadQuartierData()
      
      // Traiter la distribution d'√¢ge des quartiers (tous par d√©faut)
      const quartierAgeData = processQuartierAgeDistribution(quartiers, [])
      
      // Calculer le total des r√©ponses
      const totalPopulation = quartierAgeData.reduce((sum, item) => sum + item.count, 0)
      
      const result: AgeDistributionResult = {
        data: quartierAgeData,
        isQuartier: true,
        questionLabels: {
          title: 'Tranches d\'√¢ges',
          emoji: 'üßíüëµ',
          questionOrigin: 'Tranche d\'√¢ges (Donn√©es INSEE)',
          questionShort: 'Tranches d\'√¢ges'
        },
        totalResponses: totalPopulation,
        dataSource: 'Quartiers INSEE'
      }

      // Mettre en cache le r√©sultat
      dataCache.set(cacheKey, result)
      cacheTimestamp = Date.now()
      
      console.log(`‚úÖ Donn√©es de quartier calcul√©es et mises en cache`)
      return result
    }
    
  } catch (error) {
    console.error(`‚ùå Erreur dans ${DATAPACK_NAME}:`, error)
    
    // Retourner des donn√©es de fallback
    return {
      data: [],
      isQuartier: true,
      questionLabels: {
        title: 'Erreur de chargement',
        emoji: '‚ùå',
        questionOrigin: 'Erreur', 
        questionShort: 'Erreur'
      },
      totalResponses: 0,
      dataSource: 'Erreur'
    }
  }
}

// =====================================
// FONCTIONS DE TEST ET UTILITAIRES
// =====================================

// Fonction pour analyser les ID de SU disponibles dans les donn√©es
export const analyzeSuIds = async () => {
  console.log('üîç Analyse des ID de SU disponibles...')
  
  try {
    const suAnswers = await loadSuAnswerData()
    
    // Extraire les ID uniques
    const suIds = [...new Set(suAnswers.map(answer => answer["Su ID"]))].sort((a, b) => a - b)
    
    console.log('üìä ID des SU trouv√©s:', suIds)
    console.log('üìà Nombre total de r√©ponses:', suAnswers.length)
    
    // Compter les r√©ponses par SU
    const countBySu: Record<number, number> = {}
    suAnswers.forEach(answer => {
      const suId = answer["Su ID"]
      countBySu[suId] = (countBySu[suId] ?? 0) + 1
    })
    
    console.log('üìã R√©partition des r√©ponses par SU:')
    Object.entries(countBySu).forEach(([suId, count]) => {
      console.log(`  SU ${suId}: ${count} r√©ponses`)
    })
    
    // Analyser les cat√©gories d'√¢ge disponibles
    const ageCategories = [...new Set(suAnswers.map(answer => answer["Age Category"]).filter(Boolean))]
    console.log('üéØ Cat√©gories d\'√¢ge trouv√©es:', ageCategories)
    
    return { suIds, countBySu, ageCategories, totalAnswers: suAnswers.length }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse des SU:', error)
    return null
  }
}

// Fonction de test
export const testDpAgeDistribution = async () => {
  console.log(`üß™ Test de ${DATAPACK_NAME} avec donn√©es r√©elles...`)
  
  try {
    // Afficher le statut du cache
    console.log('üìä Statut du cache:', getCacheStatus())
    
    // Test des donn√©es de quartier
    const quartierResult = await getDpAgeDistributionData()
    console.log('‚úÖ R√©sultat quartier:', {
      isQuartier: quartierResult.isQuartier,
      dataPoints: quartierResult.data.length,
      totalResponses: quartierResult.totalResponses,
      dataSource: quartierResult.dataSource,
      totalPercentage: quartierResult.data.reduce((sum, item) => sum + item.percentage, 0).toFixed(1)
    })
    
    // Test SU individuel (utiliser un vrai ID de SU: 477, 478, 479...)
    const singleSuResult = await getDpAgeDistributionData([477])
    console.log('‚úÖ R√©sultat SU individuel (ID 477):', {
      isQuartier: singleSuResult.isQuartier,
      suId: singleSuResult.suId,
      dataPoints: singleSuResult.data.length,
      totalResponses: singleSuResult.totalResponses,
      dataSource: singleSuResult.dataSource,
      totalPercentage: singleSuResult.data.reduce((sum, item) => sum + item.percentage, 0).toFixed(1)
    })
    
    // Test avec un autre SU
    const singleSuResult2 = await getDpAgeDistributionData([478])
    console.log('‚úÖ R√©sultat SU individuel (ID 478):', {
      isQuartier: singleSuResult2.isQuartier,
      suId: singleSuResult2.suId,
      dataPoints: singleSuResult2.data.length,
      totalResponses: singleSuResult2.totalResponses,
      dataSource: singleSuResult2.dataSource,
      totalPercentage: singleSuResult2.data.reduce((sum, item) => sum + item.percentage, 0).toFixed(1)
    })
    
    // Afficher quelques √©chantillons de donn√©es
    if (singleSuResult.data.length > 0) {
      console.log('üìã √âchantillon de donn√©es SU 477:', singleSuResult.data.slice(0, 3).map(item => ({
        label: item.label,
        count: item.count,
        percentage: item.percentage + '%'
      })))
    }
    
    if (singleSuResult2.data.length > 0) {
      console.log('üìã √âchantillon de donn√©es SU 478:', singleSuResult2.data.slice(0, 3).map(item => ({
        label: item.label,
        count: item.count,
        percentage: item.percentage + '%'
      })))
    }
    
    // Test avec ID local (qui devrait √™tre mapp√© automatiquement)
    console.log('\nüîÑ Test du mappage automatique avec ID local...')
    const localIdResult = await getDpAgeDistributionData([1])
    console.log('‚úÖ R√©sultat avec ID local 1 (mapp√© automatiquement):', {
      isQuartier: localIdResult.isQuartier,
      suId: localIdResult.suId,
      dataPoints: localIdResult.data.length,
      totalResponses: localIdResult.totalResponses,
      dataSource: localIdResult.dataSource,
      totalPercentage: localIdResult.data.reduce((sum, item) => sum + item.percentage, 0).toFixed(1)
    })
    
    // Test du service de mappage centralis√©
    console.log('\nüß™ Test du service de mappage centralis√©...')
    const { testSuIdMapping } = await import('~/lib/services/suIdMapping')
    await testSuIdMapping()
    
    console.log('‚úÖ Tous les tests de distribution d\'√¢ge termin√©s avec succ√®s!')
  } catch (error) {
    console.error(`‚ùå Test ${DATAPACK_NAME} √©chou√©:`, error)
  }
}

// Clear cache utility (for development)
export const clearAgeDistributionCache = (): void => {
  dataCache.clear()
  cacheTimestamp = 0
  console.log(`üßπ ${DATAPACK_NAME} cache cleared`)
}