/**
 * TEMPLATE DATAPACK - Distribution des √¢ges
 * 
 * Ce datapack est un mod√®le complet qui montre comment :
 * 1. Charger les donn√©es r√©elles depuis les fichiers JSON
 * 2. Extraire les m√©tadonn√©es (labels, emojis) depuis les fichiers de m√©tadonn√©es
 * 3. Calculer les distributions pour les SUs individuelles et utiliser les donn√©es quartier
 * 4. Impl√©menter un syst√®me de cache c√¥t√© client
 * 5. Utiliser directement les donn√©es INSEE pour le quartier (d√©j√† agr√©g√©es)
 * 
 * Utilisation des donn√©es :
 * - Su Answer.json : Contient les r√©ponses individuelles avec "Age Category" et "Su ID"
 * - Quartiers.json : Contient les donn√©es agr√©g√©es par tranche d'√¢ge (P21_Pop1529_Sum, etc.)
 * - Su Data.json : Contient les pourcentages de population par SU ("Pop Percentage")
 * - MetaSuQuestions.json : Contient les m√©tadonn√©es des questions (titres, emojis)
 * - MetaSuChoices.json : Contient les m√©tadonn√©es des choix (labels, codes)
 * 
 * ‚ö†Ô∏è IMPORTANT POUR D'AUTRES DATAPACKS :
 * Contrairement √† l'√¢ge o√π nous avons des donn√©es quartier INSEE directes,
 * la plupart des autres questions (Genre, Transport, etc.) n√©cessiteront 
 * une moyenne pond√©r√©e en utilisant les "Pop Percentage" de Su Data.json :
 * - SU 1 : 12.25% du quartier
 * - SU 2 : 79.5% du quartier  
 * - SU 3 : 8.25% du quartier
 */

import { 
  getCacheStatus 
} from '~/lib/data-loader'

// =====================================
// INTERFACES ET TYPES
// =====================================

// Interface pour les r√©ponses individuelles (Su Answer.json)
interface SuAnswer {
  ID: number
  "Su ID": number
  "Age Category": string
  Gender?: string
  [key: string]: unknown
}

// Interface pour les donn√©es de quartier (Quartiers.json)
interface QuartierData {
  "Survey ID": number
  "Population Sum": number
  "P21 Pop1529 Sum": number    // 15-29 ans
  "P21 Pop3044 Sum": number    // 30-44 ans
  "P21 Pop4559 Sum": number    // 45-59 ans
  "P21 Pop6074 Sum": number    // 60-74 ans
  "P21 Pop75p Sum": number     // 75+ ans
  [key: string]: unknown
}

// Interface pour les m√©tadonn√©es des questions
interface MetaQuestion {
  Id: number
  "Question Origin": string
  "Question Short": string
  "Emoji": string
  "Metabase Question Key": string
}

// Interface pour les m√©tadonn√©es des choix
interface MetaChoice {
  Id: number
  "Label Origin": string
  "Label Long": string
  "Label Short": string
  "Emoji": string
  "Metabase Question Key": string
  "Metabase Choice Key": string
}

// Interface pour le r√©sultat final du datapack
export interface AgeDistributionResult {
  data: {
    value: string         // Cl√© du choix (ex: "FROM_15_TO_29")
    label: string         // Label affich√© (ex: "15-29 ans")
    emoji: string         // Emoji associ√©
    count: number         // Nombre absolu de r√©ponses
    percentage: number    // Pourcentage
    color: string         // Couleur pour la visualisation
    midpoint: number      // Point m√©dian de la tranche (pour calculs)
  }[]
  color: string           // Couleur principale
  isQuartier: boolean     // True si vue quartier, false si SU sp√©cifique
  questionLabels: {
    title: string
    emoji: string
    questionOrigin: string
    questionShort: string
  }
  suId?: number          // ID de la SU si vue sp√©cifique
  totalResponses: number // Nombre total de r√©ponses
  dataSource: 'real' | 'fallback' // Source des donn√©es
}

// =====================================
// CONSTANTES ET CONFIGURATION
// =====================================

const DATAPACK_NAME = 'DpAgeDistributionTemplate'

// Cache c√¥t√© client pour √©viter les recalculs
const dataCache = new Map<string, AgeDistributionResult>()
let cacheTimestamp = 0
const CACHE_DURATION = 3600000 // 1 heure en millisecondes

// Mappage des tranches d'√¢ge INSEE vers nos codes
const INSEE_AGE_MAPPING = {
  'P21 Pop1529 Sum': 'FROM_15_TO_29',
  'P21 Pop3044 Sum': 'FROM_30_TO_44', 
  'P21 Pop4559 Sum': 'FROM_45_TO_59',
  'P21 Pop6074 Sum': 'FROM_60_TO_74',
  'P21 Pop75p Sum': 'ABOVE_75'
}

// Points m√©dians pour les calculs (ex: moyenne d'√¢ge)
const AGE_MIDPOINTS: Record<string, number> = {
  FROM_15_TO_29: 22,
  FROM_30_TO_44: 37,
  FROM_45_TO_59: 52,
  FROM_60_TO_74: 67,
  ABOVE_75: 82
}

// Import du datapack de couleurs
import { getPalette, getColorByName } from './DpColor'

// Couleurs par d√©faut pour la visualisation (fallback uniquement)
const DEFAULT_COLORS = [
  '#3b82f6', // bleu
  '#10b981', // √©meraude
  '#f59e0b', // ambre
  '#ef4444', // rouge
  '#8b5cf6', // violet
]

// =====================================
// FONCTIONS DE CHARGEMENT DES DONN√âES
// =====================================

/**
 * Charge les r√©ponses individuelles depuis Su Answer.json
 */
const loadSuAnswerData = async (): Promise<SuAnswer[]> => {
  try {
    const response = await fetch('/api/data/Su%20Answer')
    if (!response.ok) throw new Error(`HTTP ${response.status}`)
    const data = await response.json() as SuAnswer[]
    console.log(`üìä Charg√© ${data.length} r√©ponses individuelles`)
    return data
  } catch (error) {
    console.error('Erreur lors du chargement de Su Answer:', error)
    return []
  }
}

/**
 * Charge les donn√©es de quartier depuis Quartiers.json
 */
const loadQuartierData = async (): Promise<QuartierData[]> => {
  try {
    const response = await fetch('/api/data/Quartiers')
    if (!response.ok) throw new Error(`HTTP ${response.status}`)
    const data = await response.json() as QuartierData[]
    console.log(`üèòÔ∏è Charg√© ${data.length} quartiers`)
    return data
  } catch (error) {
    console.error('Erreur lors du chargement des quartiers:', error)
    return []
  }
}

/**
 * Charge les m√©tadonn√©es des questions depuis MetaSuQuestions.json
 */
const loadMetaQuestions = async (): Promise<MetaQuestion[]> => {
  try {
    const response = await fetch('/api/data/MetaSuQuestions')
    if (!response.ok) throw new Error(`HTTP ${response.status}`)
    const data = await response.json() as MetaQuestion[]
    console.log(`üîç Charg√© ${data.length} m√©tadonn√©es de questions`)
    return data
  } catch (error) {
    console.error('Erreur lors du chargement des m√©tadonn√©es de questions:', error)
    return []
  }
}

/**
 * Charge les m√©tadonn√©es des choix depuis MetaSuChoices.json
 */
const loadMetaChoices = async (): Promise<MetaChoice[]> => {
  try {
    const response = await fetch('/api/data/MetaSuChoices')
    if (!response.ok) throw new Error(`HTTP ${response.status}`)
    const data = await response.json() as MetaChoice[]
    console.log(`üéØ Charg√© ${data.length} m√©tadonn√©es de choix`)
    return data
  } catch (error) {
    console.error('Erreur lors du chargement des m√©tadonn√©es de choix:', error)
    return []
  }
}

// =====================================
// FONCTIONS DE TRAITEMENT DES M√âTADONN√âES
// =====================================

/**
 * Extrait les m√©tadonn√©es de la question "Age Category"
 */
const getAgeQuestionMetadata = (metaQuestions: MetaQuestion[]) => {
  const ageQuestion = metaQuestions.find(q => q["Metabase Question Key"] === "Age Category")
  
  if (!ageQuestion) {
    console.warn('‚ö†Ô∏è M√©tadonn√©es de question √¢ge non trouv√©es, utilisation des valeurs par d√©faut')
    return {
      title: 'Distribution d\'√¢ge',
      emoji: 'üë•',
      questionOrigin: 'Quelle est votre tranche d\'√¢ge ?',
      questionShort: 'Tranches d\'√¢ges'
    }
  }

  return {
    title: ageQuestion["Question Short"] || 'Distribution d\'√¢ge',
    emoji: ageQuestion.Emoji || 'üë•',
    questionOrigin: ageQuestion["Question Origin"] || 'Quelle est votre tranche d\'√¢ge ?',
    questionShort: ageQuestion["Question Short"] || 'Tranches d\'√¢ges'
  }
}

/**
 * Cr√©e un dictionnaire des choix d'√¢ge avec leurs m√©tadonn√©es
 */
const getAgeChoicesMetadata = (metaChoices: MetaChoice[]) => {
  const ageChoices = metaChoices.filter(c => c["Metabase Question Key"] === "Age Category")
  
  if (ageChoices.length === 0) {
    console.warn('‚ö†Ô∏è M√©tadonn√©es de choix √¢ge non trouv√©es, utilisation des valeurs par d√©faut')
    return {
      FROM_15_TO_29: { label: '15-29 ans', emoji: 'üßí' },
      FROM_30_TO_44: { label: '30-44 ans', emoji: 'üë®' },
      FROM_45_TO_59: { label: '45-59 ans', emoji: 'üë®‚Äçüíº' },
      FROM_60_TO_74: { label: '60-74 ans', emoji: 'üë¥' },
      ABOVE_75: { label: '75+ ans', emoji: 'üëµ' }
    }
  }

  const choicesMap: Record<string, { label: string; emoji: string }> = {}
  
  ageChoices.forEach(choice => {
    const key = choice["Metabase Choice Key"]
    choicesMap[key] = {
      label: choice["Label Origin"] || choice["Label Short"] || key,
      emoji: choice.Emoji || 'üë•'
    }
  })

  return choicesMap
}

// =====================================
// FONCTIONS DE CALCUL POUR LES SU
// =====================================

/**
 * Calcule la distribution d'√¢ge pour une SU sp√©cifique
 * Utilise les r√©ponses individuelles de Su Answer.json
 */
const calculateSuAgeDistribution = async (suId: number, allAnswers: SuAnswer[], choicesMetadata: Record<string, { label: string; emoji: string }>) => {
  console.log(`üî¢ Calcul distribution √¢ge pour SU ${suId}`)
  
  // Filtrer les r√©ponses pour cette SU
  const suAnswers = allAnswers.filter(answer => answer["Su ID"] === suId)
  console.log(`üìù ${suAnswers.length} r√©ponses trouv√©es pour SU ${suId}`)
  
  if (suAnswers.length === 0) {
    console.warn(`‚ö†Ô∏è Aucune r√©ponse trouv√©e pour SU ${suId}`)
    return []
  }

  // Compter les r√©ponses par tranche d'√¢ge
  const ageCounts: Record<string, number> = {}
  
  suAnswers.forEach(answer => {
    const ageCategory = answer["Age Category"]
    if (ageCategory && typeof ageCategory === 'string') {
      ageCounts[ageCategory] = (ageCounts[ageCategory] ?? 0) + 1
    }
  })

  const totalResponses = suAnswers.length

  // Obtenir les couleurs depuis le datapack DpColor
  const paletteColors = await getPalette('graph', suId)
  
  // Transformer en format de sortie avec m√©tadonn√©es
  const result = Object.entries(ageCounts).map(([ageKey, count], index) => {
    const metadata = choicesMetadata[ageKey] ?? { label: ageKey, emoji: 'üë•' }
    
    return {
      value: ageKey,
      label: metadata.label,
      emoji: metadata.emoji,
      count,
      percentage: (count / totalResponses) * 100,
      color: paletteColors[index] ?? DEFAULT_COLORS[index] ?? DEFAULT_COLORS[0]!,
      midpoint: AGE_MIDPOINTS[ageKey] ?? 50
    }
  })

  console.log(`‚úÖ Distribution calcul√©e: ${result.length} tranches d'√¢ge`)
  return result
}

// =====================================
// FONCTIONS DE CALCUL POUR LE QUARTIER
// =====================================

/**
 * Utilise directement la distribution d'√¢ge du quartier
 * Les donn√©es de Quartiers.json sont d√©j√† agr√©g√©es au niveau quartier (INSEE)
 */
const getQuartierAgeDistribution = async (quartierData: QuartierData[], choicesMetadata: Record<string, { label: string; emoji: string }>) => {
  console.log('üèòÔ∏è R√©cup√©ration distribution √¢ge quartier (donn√©es INSEE agr√©g√©es)')
  
  if (quartierData.length === 0) {
    console.warn('‚ö†Ô∏è Aucune donn√©e de quartier disponible')
    return []
  }

  // Prendre le premier quartier (les donn√©es sont d√©j√† agr√©g√©es)
  const quartier = quartierData[0]!
  
  // Les donn√©es INSEE sont d√©j√† des totaux par tranche d'√¢ge pour tout le quartier
  const totalPop = 
    (quartier["P21 Pop1529 Sum"] ?? 0) +
    (quartier["P21 Pop3044 Sum"] ?? 0) +
    (quartier["P21 Pop4559 Sum"] ?? 0) +
    (quartier["P21 Pop6074 Sum"] ?? 0) +
    (quartier["P21 Pop75p Sum"] ?? 0)

  console.log(`üë• Population totale du quartier (INSEE): ${totalPop.toFixed(0)}`)

  if (totalPop === 0) {
    console.warn('‚ö†Ô∏è Population totale nulle dans les donn√©es quartier')
    return []
  }

  // Obtenir les couleurs depuis le datapack DpColor (pour le quartier)
  const paletteColors = await getPalette('graph', 0)
  
  // Utiliser directement les donn√©es INSEE agr√©g√©es (pas de calcul de moyenne n√©cessaire)
  const result = Object.entries(INSEE_AGE_MAPPING).map(([inseeKey, ageKey], index) => {
    const count = quartier[inseeKey] as number ?? 0
    const metadata = choicesMetadata[ageKey] ?? { label: ageKey, emoji: 'üë•' }
    
    return {
      value: ageKey,
      label: metadata.label,
      emoji: metadata.emoji,
      count: Math.round(count), // Population r√©elle INSEE
      percentage: (count / totalPop) * 100,
      color: paletteColors[index] ?? DEFAULT_COLORS[index] ?? DEFAULT_COLORS[0]!,
      midpoint: AGE_MIDPOINTS[ageKey] ?? 50
    }
  })

  console.log(`‚úÖ Distribution quartier extraite: ${result.length} tranches d'√¢ge (INSEE)`)
  return result
}

// =====================================
// FONCTION PRINCIPALE DU DATAPACK
// =====================================

/**
 * Fonction principale qui retourne les donn√©es de distribution d'√¢ge
 * 
 * @param selectedSus - Liste des SUs s√©lectionn√©es (optionnel)
 * @returns Distribution d'√¢ge avec m√©tadonn√©es compl√®tes
 */
export const getDpAgeDistributionTemplateData = async (selectedSus?: number[]): Promise<AgeDistributionResult> => {
  try {
    const cacheKey = JSON.stringify(selectedSus ?? [])
    
    // 1. V√âRIFICATION DU CACHE
    if (dataCache.has(cacheKey) && (Date.now() - cacheTimestamp) < CACHE_DURATION) {
      console.log(`‚úÖ Utilisation du cache pour la distribution d'√¢ge`)
      return dataCache.get(cacheKey)!
    }

    console.log(`üîÑ Calcul de la distribution d'√¢ge (cache manqu√©)...`)
    
    // 2. CHARGEMENT DES DONN√âES EN PARALL√àLE
    const [suAnswers, quartierData, metaQuestions, metaChoices] = await Promise.all([
      loadSuAnswerData(),
      loadQuartierData(),
      loadMetaQuestions(),
      loadMetaChoices()
    ])

    // 3. EXTRACTION DES M√âTADONN√âES
    const questionMetadata = getAgeQuestionMetadata(metaQuestions)
    const choicesMetadata = getAgeChoicesMetadata(metaChoices)

    // 4. D√âTERMINATION DU TYPE DE VUE
    const isQuartier = !selectedSus || selectedSus.length === 0 || selectedSus.length > 1
    console.log(`üìä Type de vue: ${isQuartier ? 'Quartier' : `SU ${selectedSus[0]}`}`)

    let distributionData: AgeDistributionResult['data'] = []
    let totalResponses = 0
    let mainColor = '#002878'
    let suId: number | undefined

    // 5. CALCUL DE LA DISTRIBUTION
    if (isQuartier) {
      // VUE QUARTIER : Utiliser les donn√©es agr√©g√©es INSEE
      distributionData = await getQuartierAgeDistribution(quartierData, choicesMetadata)
      totalResponses = distributionData.reduce((sum, item) => sum + item.count, 0)
      
      // Couleur du quartier depuis le datapack DpColor
      try {
        mainColor = await getColorByName('colorMain', 0)
      } catch {
        console.warn('Impossible de charger la couleur du quartier')
        mainColor = '#002878'
      }
    } else {
      // VUE SU SP√âCIFIQUE : Utiliser les r√©ponses individuelles
      suId = selectedSus[0]!
      distributionData = await calculateSuAgeDistribution(suId, suAnswers, choicesMetadata)
      totalResponses = distributionData.reduce((sum, item) => sum + item.count, 0)
      
      // Couleur de la SU depuis le datapack DpColor
      try {
        mainColor = await getColorByName('colorMain', suId)
      } catch {
        console.warn(`Impossible de charger la couleur pour SU ${suId}`)
        mainColor = DEFAULT_COLORS[0]!
      }
    }

    // 6. CONSTRUCTION DU R√âSULTAT FINAL
    const result: AgeDistributionResult = {
      data: distributionData,
      color: mainColor,
      isQuartier,
      questionLabels: questionMetadata,
      suId,
      totalResponses,
      dataSource: distributionData.length > 0 ? 'real' : 'fallback'
    }

    // 7. MISE EN CACHE
    dataCache.set(cacheKey, result)
    cacheTimestamp = Date.now()
    
    console.log(`‚úÖ Distribution d'√¢ge calcul√©e et mise en cache (${totalResponses} r√©ponses)`)
    return result

  } catch (error) {
    console.error(`‚ùå Erreur dans ${DATAPACK_NAME}:`, error)
    
    // 8. DONN√âES DE SECOURS EN CAS D'ERREUR
    return {
      data: [
        { value: 'FROM_15_TO_29', label: '15-29 ans', emoji: 'üßí', count: 0, percentage: 0, color: DEFAULT_COLORS[0]!, midpoint: 22 },
        { value: 'FROM_30_TO_44', label: '30-44 ans', emoji: 'üë®', count: 0, percentage: 0, color: DEFAULT_COLORS[1]!, midpoint: 37 },
        { value: 'FROM_45_TO_59', label: '45-59 ans', emoji: 'üë®‚Äçüíº', count: 0, percentage: 0, color: DEFAULT_COLORS[2]!, midpoint: 52 },
        { value: 'FROM_60_TO_74', label: '60-74 ans', emoji: 'üë¥', count: 0, percentage: 0, color: DEFAULT_COLORS[3]!, midpoint: 67 },
        { value: 'ABOVE_75', label: '75+ ans', emoji: 'üëµ', count: 0, percentage: 0, color: DEFAULT_COLORS[4]!, midpoint: 82 }
      ],
      color: '#6c757d',
      isQuartier: true,
      questionLabels: {
        title: 'Distribution d\'√¢ge',
        emoji: 'üë•',
        questionOrigin: 'Quelle est votre tranche d\'√¢ge ?',
        questionShort: 'Tranches d\'√¢ges'
      },
      totalResponses: 0,
      dataSource: 'fallback'
    }
  }
}

// =====================================
// FONCTIONS UTILITAIRES
// =====================================

/**
 * Fonction de test pour valider le fonctionnement du datapack
 */
export const testDpAgeDistributionTemplate = async () => {
  console.log(`üß™ Test du ${DATAPACK_NAME}...`)
  
  try {
    // Afficher le statut du cache
    console.log('üìä Statut du cache:', getCacheStatus())
    
    // Test 1: Vue quartier
    console.log('\n--- Test 1: Vue Quartier ---')
    const quartierResult = await getDpAgeDistributionTemplateData()
    console.log('‚úÖ R√©sultat quartier:', {
      isQuartier: quartierResult.isQuartier,
      tranches: quartierResult.data.length,
      totalReponses: quartierResult.totalResponses,
      sourceData: quartierResult.dataSource,
      couleurPrincipale: quartierResult.color
    })
    
    // Afficher le d√©tail des tranches
    quartierResult.data.forEach(tranche => {
      console.log(`  ${tranche.emoji} ${tranche.label}: ${tranche.percentage.toFixed(1)}% (${tranche.count})`)
    })
    
    // Test 2: Vue SU sp√©cifique
    console.log('\n--- Test 2: SU Sp√©cifique (ID 477) ---')
    const suResult = await getDpAgeDistributionTemplateData([477])
    console.log('‚úÖ R√©sultat SU:', {
      isQuartier: suResult.isQuartier,
      suId: suResult.suId,
      tranches: suResult.data.length,
      totalReponses: suResult.totalResponses,
      sourceData: suResult.dataSource
    })
    
    // Afficher le d√©tail des tranches
    suResult.data.forEach(tranche => {
      console.log(`  ${tranche.emoji} ${tranche.label}: ${tranche.percentage.toFixed(1)}% (${tranche.count})`)
    })
    
    console.log(`\n‚úÖ Tous les tests du ${DATAPACK_NAME} termin√©s avec succ√®s!`)
    
  } catch (error) {
    console.error(`‚ùå √âchec du test ${DATAPACK_NAME}:`, error)
  }
}

/**
 * Vide le cache (utile pour le d√©veloppement)
 */
export const clearAgeDistributionTemplateCache = (): void => {
  dataCache.clear()
  cacheTimestamp = 0
  console.log(`üßπ Cache du ${DATAPACK_NAME} vid√©`)
}

/**
 * Fonction pour obtenir des statistiques sur les donn√©es
 */
export const getAgeDistributionStats = async () => {
  try {
    const [suAnswers, quartierData] = await Promise.all([
      loadSuAnswerData(),
      loadQuartierData()
    ])
    
    const stats = {
      totalIndividualAnswers: suAnswers.length,
      uniqueSUs: new Set(suAnswers.map(a => a["Su ID"])).size,
      quartierDataPoints: quartierData.length,
      ageCategories: new Set(suAnswers.map(a => a["Age Category"]).filter(Boolean)).size
    }
    
    console.log('üìä Statistiques des donn√©es √¢ge:', stats)
    return stats
    
  } catch (error) {
    console.error('‚ùå Erreur lors du calcul des statistiques:', error)
    return null
  }
}