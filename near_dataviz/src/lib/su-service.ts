// SERVICE SU :
// ===========
// Ce service g√®re toutes les op√©rations li√©es aux Sph√®res d'Usages (S.U.) :
// - R√©cup√©ration des informations des S.U.
// - Liaison entre les donn√©es Su Bank (m√©tadonn√©es) et Su Data (donn√©es terrain)
// - Recherche par ID ou num√©ro de SU
// - R√©cup√©ration du nom du quartier depuis Surveys.json (table Surveys dans Metabase) (plus fiable que Quartiers.json)
// - Survey Id = diagnostic mill√©sim√© d'un quartier. 1 pour la Porte d'Orl√©ans (il pourrait y avoir plusieurs diagnostics pour un m√™me quartier).
// - Voir ici pour d√©finition de SurveyId dans le sch√©ma Prisma :
// - https://github.com/ABC-TransitionBasCarbone/near/blob/c4aa0794f7565a35b03aa3680a21357bec385dcf/app-near/prisma/schema.prisma#L144

import type { SuBankData, SuData, SuInfo } from './types'
import { 
  loadSuBankData, 
  loadSuData, 
  loadSurveys, 
  loadQuartiers 
} from './data-loader'
import { 
  validateAndSanitizeIcon, 
  getFallbackIcon, 
  logIconValidationIssues 
} from './icon-validator'


// CONFIGURATION DU SURVEY ID
// ==========================
// surveyId = 1 correspond au diagnostic de la Porte d'Orl√©ans
// Cette constante filtre toutes les donn√©es pour ce survey sp√©cifique

const surveyId = 1


// R√âCUP√âRATION DU NOM DU QUARTIER
// ===============================
/** Extrait le nom du quartier depuis le fichier Surveys.json (table "Surveys" dans Metabase)
    @returns {Promise<string>} Le nom du quartier ou "Quartier" par d√©faut.
    √Ä FAIRE /!\ : FILTRER POUR LE SURVEY ID DE L'UTILISATEUR CONNECT√â */

export const getQuartierName = async (): Promise<string> => {
  try {
    const surveys = await loadSurveys()
    
    // FILTRE PAR SURVEY ID : Trouve le survey correspondant √† notre surveyId
    const currentSurvey = surveys.find(survey => survey.ID === surveyId)
    
    // Retourne le nom du survey trouv√© ou "Quartier" par d√©faut
    return currentSurvey?.Name ?? 'Quartier'
  } catch (error) {
    console.error('Error loading quartier name:', error)
    return 'Quartier'
  }
}


// R√âCUP√âRATION DE LA POPULATION TOTALE DU QUARTIER
// ================================================
/** Extrait la population totale depuis Quartiers.json pour le surveyId actuel
    @returns {Promise<number>} La population totale du quartier */

export const getQuartierPopulation = async (): Promise<number> => {
  try {
    const quartiers = await loadQuartiers()
    
    // FILTRE PAR SURVEY ID : Trouve le quartier correspondant √† notre surveyId
    const currentQuartier = quartiers.find(quartier => quartier["Survey ID"] === surveyId)
    
    // Retourne la population totale arrondie ou 0 par d√©faut
    return Math.round(currentQuartier?.["Population Sum"] ?? 0)
  } catch (error) {
    console.error('Error loading quartier population:', error)
    return 0
  }
}


// R√âCUP√âRATION DE TOUTES LES INFORMATIONS SU
// ==========================================
/* Cette fonction principale :
 1. Charge les donn√©es depuis Su Bank.json (m√©tadonn√©es) et Su Data.json (donn√©es terrain)
 2. Fait la liaison entre les deux sources via les IDs (Su Data.ID ‚Üí Su Bank.Id)
 3. Construit des objets SuInfo complets avec toutes les informations n√©cessaires
 4. Trie les SU par num√©ro croissant
 ==> @returns {Promise<SuInfo[]>} Tableau de tous les SU avec leurs informations compl√®tes */
export const getSuInfo = async (): Promise<SuInfo[]> => {
  try {
    // Load data with caching
    const [bankData, dataEntries, totalPopulation] = await Promise.all([
      loadSuBankData(),
      loadSuData(),
      getQuartierPopulation()
    ])

    // FILTRE PAR SURVEY ID : Ne garde que les donn√©es du survey sp√©cifi√©
    const filteredDataEntries = dataEntries.filter(entry => 
      (entry as SuData & { "Survey ID"?: number })["Survey ID"] === surveyId
    )

    return filteredDataEntries.map(entry => {
      // LIAISON DES DONN√âES : Trouve la m√©tadonn√©e correspondante dans Su Bank
      // via la cl√© √©trang√®re "ID" qui relie Su Data.ID avec Su Bank.Id
      const bankEntry = bankData.find(bank => bank.Id === entry.ID)
      
      // CALCUL DE LA POPULATION R√âELLE DE LA SU
      const popPercentage = parseFloat(entry["Pop Percentage"])
      const realPopulation = Math.round((popPercentage / 100) * totalPopulation)
      
      // VALIDATION ET NETTOYAGE DE L'IC√îNE
      let validatedIcon = 'üìç' // Fallback par d√©faut
      
      if (bankEntry?.Icon2) {
        const validationResult = validateAndSanitizeIcon(bankEntry.Icon2)
        
        // Log des probl√®mes de validation pour monitoring
        if (!validationResult.isValid || validationResult.errors.length > 0 || validationResult.warnings.length > 0) {
          logIconValidationIssues(entry.ID, validationResult)
        }
        
        if (validationResult.isValid && validationResult.sanitizedIcon) {
          validatedIcon = validationResult.sanitizedIcon
        } else {
          // En cas d'√©chec de validation, utiliser une ic√¥ne de fallback s√©curis√©e
          validatedIcon = getFallbackIcon(entry.Su)
          console.warn(`üîí Ic√¥ne non s√©curis√©e remplac√©e par fallback pour SU ${entry.ID} (${bankEntry["Name Fr"]})`)
        }
      } else {
        // Pas d'ic√¥ne dans les donn√©es, utiliser le fallback
        validatedIcon = getFallbackIcon(entry.Su)
      }
      
      // CONSTRUCTION DE L'OBJET SuInfo COMPLET
      return {
        id: entry.ID,                                          // ID unique de la SU (477, 478, 479, etc.)
        su: entry.Su,                                          // Num√©ro local de la SU (1, 2, 3, etc.)
        name: bankEntry?.["Name Fr"] ?? `SU ${entry.Su}`,      // Nom fran√ßais || fallback
        color: bankEntry?.colorMain ?? '#6c757d',            // Couleur principale ou gris par d√©faut
        popPercentage: popPercentage,                          // Pourcentage de population
        realPopulation: realPopulation,                       // Population r√©elle calcul√©e (arrondie)
        icon: validatedIcon,                                   // Ic√¥ne valid√©e et s√©curis√©e
        bankData: bankEntry!                                   // R√©f√©rence compl√®te aux m√©tadonn√©es
      }
    }).sort((a, b) => a.su - b.su) // Tri par Id local des SU (1, 2, 3, 4, 5, 6, 7, 8, 9)
  } catch (error) {
    console.error('Error loading SU info:', error)
    return []
  }
}


// RECHERCHE D'UN SU PAR SON ID UNIQUE
// ===================================
/** Trouve un SU sp√©cifique en utilisant son ID (cl√© primaire, 477, 478, 479, etc.)
    @param {number} id - L'ID unique du SU √† rechercher
    @returns {Promise<SuInfo | undefined>} L'objet SuInfo correspondant ou undefined si non trouv√© */

export const getSuById = async (id: number): Promise<SuInfo | undefined> => {
  const allSus = await getSuInfo()
  return allSus.find(su => su.id === id)
}

// RECHERCHE D'UN SU PAR SON NUM√âRO / ID LOCAL
// =========================================== 
/** Trouve un SU sp√©cifique en utilisant son num√©ro (1, 2, 3, etc.)
    Utile pour la navigation et l'affichage utilisateur
 
 @param {suNumber} suNumber - Le num√©ro du SU √† rechercher (1 √† 9, rarement plus de 5 dans un quartier donn√©)
 @returns {Promise<SuInfo | undefined>} L'objet SuInfo correspondant ou undefined si non trouv√©
  
 Exemple : getSuBySuNumber(1) retourne le SU num√©ro 1
*/
export const getSuBySuNumber = async (suNumber: number): Promise<SuInfo | undefined> => {
  const allSus = await getSuInfo()
  return allSus.find(su => su.su === suNumber)
}